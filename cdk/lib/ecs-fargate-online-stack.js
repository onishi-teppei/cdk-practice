"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsFargateOnlineStack = void 0;
const cdk = require("aws-cdk-lib/core");
const ecs = require("aws-cdk-lib/aws-ecs");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const logs = require("aws-cdk-lib/aws-logs");
const albv2 = require("aws-cdk-lib/aws-elasticloadbalancingv2");
const aws_ecs_1 = require("aws-cdk-lib/aws-ecs");
const Certificate = require("aws-cdk-lib/aws-certificatemanager");
const ecr = require("aws-cdk-lib/aws-ecr");
const s3 = require("aws-cdk-lib/aws-s3");
const ssm = require("aws-cdk-lib/aws-ssm");
class EcsFargateOnlineStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const argContext = 'environment';
        const envKey = this.node.tryGetContext(argContext);
        if (envKey == undefined)
            throw new Error(`Please specify environment with context option. ex) cdk deploy -c ${argContext}=stg`);
        const context = this.node.tryGetContext(envKey);
        if (context == undefined)
            throw new Error('Invalid environment.');
        const vpc = ec2.Vpc.fromLookup(this, 'VPCapp', {
            vpcName: `${context.AWSENV}-to2go-app-vpc`,
        });
        // IAM Role
        const executionRole = new iam.Role(this, 'EcsTaskExecutionRole', {
            roleName: `${context.AWSENV}-to2go-online-EcsTaskExecutionRole`,
            assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),
            managedPolicies: [
                iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonECSTaskExecutionRolePolicy'),
            ],
        });
        const ssmPolicy = new iam.Policy(this, 'ssm-policy', {
            statements: [new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ['ssm:GetParameters'],
                    resources: ["*"],
                })],
        });
        executionRole.attachInlinePolicy(ssmPolicy);
        const serviceTaskRole = new iam.Role(this, 'EcsServiceTaskRole', {
            roleName: `${context.AWSENV}-to2go-online-ecs-service-task-role`,
            assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),
        });
        // const staticbucket = s3.Bucket.fromBucketName(this, "Bucket", `${context.AWSENV}-to2go-app-s3`);
        // const s3Policy = new iam.Policy(this, 's3-policy', {
        //       statements:[ new iam.PolicyStatement( {
        //       effect: iam.Effect.ALLOW,
        //       actions: ['s3:ListBucket', 's3:PutObject', 's3:GetObject', 's3:DeleteObject'],
        //       resources : [`${staticbucket.bucketArn}/*`]},
        //       )],
        // })
        // const ecsexecPolicy = new iam.Policy(this, 'ecsexec-policy', {
        //   statements:[ new iam.PolicyStatement( {
        //   effect: iam.Effect.ALLOW,
        //   actions: ['ssmmessages:CreateControlChannel','ssmmessages:CreateDataChannel','ssmmessages:OpenControlChannel','ssmmessages:OpenDataChannel'],
        //   resources : ["*"]},
        //   )],
        // })
        // serviceTaskRole.attachInlinePolicy(s3Policy)
        // serviceTaskRole.attachInlinePolicy(ecsexecPolicy)
        // ECS TaskDefinition
        const logGroup = new logs.LogGroup(this, 'ServiceLogGroup', {
            logGroupName: `${context.AWSENV}-to2go-app-online-fargate-log`
        });
        const ecrname = ecr.Repository.fromRepositoryName(this, 'ecrname', `${context.AWSENV}-to2go-app-ecr-repository`);
        const image = aws_ecs_1.ContainerImage.fromEcrRepository(ecrname, 'latest');
        const serviceTaskDefinition = new ecs.FargateTaskDefinition(this, 'ServiceTaskDefinition', {
            executionRole: executionRole,
            taskRole: serviceTaskRole,
            cpu: context.ONLINECPU,
            memoryLimitMiB: context.ONLINEMEMORY,
            // runtimePlatform: {
            //   cpuArchitecture: ecs.CpuArchitecture.of('ARM64')
            // }
        });
        serviceTaskDefinition.addContainer(`${context.AWSENV}-to2go-app-online`, {
            image: image,
            cpu: context.ONLINECPU,
            memoryLimitMiB: context.ONLINEMEMORY,
            memoryReservationMiB: context.ONLINEMEMORY,
            command: [
                "bundle",
                "exec",
                "rails",
                "s",
                "-e",
                "production",
                "-p",
                "8000",
                "-b",
                "0.0.0.0"
            ],
            secrets: {
                // 'CLIENT_ORIGIN': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'CLIENT_ORIGIN', 'CLIENT_ORIGIN')),
                // 'CORS_ALLOWED_ORIGINS': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'CORS_ALLOWED_ORIGINS', 'CORS_ALLOWED_ORIGINS')),
                'DB_DATABASE': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'DB_DATABASE', '/to2go/DB_DATABASE')),
                'DB_HOST': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'DB_HOST', '/to2go/DB_HOST')),
                'DB_PASSWORD': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'DB_PASSWORD', '/to2go/DB_PASSWORD')),
                'DB_PORT': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'DB_PORT', '/to2go/DB_PORT')),
                'DB_USERNAME': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'DB_USERNAME', '/to2go/DB_USERNAME')),
                'SECRET_KEY_BASE': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'SECRET_KEY_BASE', '/to2go/SECRET_KEY_BASE')),
                // 'INTEC_ENDPOINT': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'INTEC_ENDPOINT', 'INTEC_ENDPOINT')),
                // 'JWT_PRIVATE_KEY': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'JWT_PRIVATE_KEY', 'JWT_PRIVATE_KEY')),
                // 'RAILS_ENV': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'RAILS_ENV', 'RAILS_ENV')),
                // 'RAILS_HOST': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'RAILS_HOST', 'RAILS_HOST')),
                // 'RAILS_LOG_TO_STDOUT': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'RAILS_LOG_TO_STDOUT', 'RAILS_LOG_TO_STDOUT')),
                // 'REDIS_DB': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'REDIS_DB', 'REDIS_DB')),
                // 'REDIS_HOST': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'REDIS_HOST', 'REDIS_HOST')),
                // 'REDIS_PORT': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'REDIS_PORT', 'REDIS_PORT')),
                // 'SECRET_KEY_BASE': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'SECRET_KEY_BASE', 'SECRET_KEY_BASE')),
                // 'SIMOUNT_ENDPOINT': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'SIMOUNT_ENDPOINT', 'SIMOUNT_ENDPOINT')),
                // 'SIDEKIQ_LOGIN_ID': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'SIDEKIQ_LOGIN_ID', 'SIDEKIQ_LOGIN_ID')),
                // 'SIDEKIQ_LOGIN_PASS': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'SIDEKIQ_LOGIN_PASS', 'SIDEKIQ_LOGIN_PASS')),
                // 'S3_BUCKET_NAME': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'S3_BUCKET_NAME', 'S3_BUCKET_NAME')),
                // 'SERVER_HOST': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'SERVER_HOST', 'SERVER_HOST')),
                // 'ACTIVE_STORAGE_S3_BUCKET': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'ACTIVE_STORAGE_S3_BUCKET', 'ACTIVE_STORAGE_S3_BUCKET')),
                // 'DB_TEST_DATABASE': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'DB_TEST_DATABASE', 'DB_TEST_DATABASE')),
                // 'INTEC_AWS_ACCESS_KEY': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'INTEC_AWS_ACCESS_KEY', 'INTEC_AWS_ACCESS_KEY')),
                // 'INTEC_AWS_SECRET_KEY': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'INTEC_AWS_SECRET_KEY', 'INTEC_AWS_SECRET_KEY')),
                // 'INTEC_AWS_REGION': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'INTEC_AWS_REGION', 'INTEC_AWS_REGION')),
                // 'LOGS_S3_BUCKET_NAME': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'ILOGS_S3_BUCKET_NAME', 'LOGS_S3_BUCKET_NAME')),
                // 'OPENAI_ACCESS_TOKEN': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'OPENAI_ACCESS_TOKEN', 'OPENAI_ACCESS_TOKEN')),
                // 'OPENAI_SHOW_LOG_ERRORS': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'OPENAI_SHOW_LOG_ERRORS', 'OPENAI_SHOW_LOG_ERRORS')),
                // 'CPASS_TOKEN': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'CPASS_TOKEN', 'CPASS_TOKEN')),
                // 'CPASS_URI': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'CPASS_URI', 'CPASS_URI')),
                // 'FROM_ADDRESS': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'FROM_ADDRESS', 'FROM_ADDRESS')),
                // 'CPAAS_TOKEN': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'CPAAS_TOKEN', 'CPAAS_TOKEN')),
                // 'CPAAS_URI': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'CPAAS_URI', 'CPAAS_URI')),
                // 'CPAAS_FROM_ADDRESS': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'CPAAS_FROM_ADDRESS', 'CPAAS_FROM_ADDRESS')),
                // 'DOCUMENT_INTELLIGENCE_API_KEY': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'DOCUMENT_INTELLIGENCE_API_KEY', 'DOCUMENT_INTELLIGENCE_API_KEY')),
                // 'DOCUMENT_INTELLIGENCE_ENDPOINT': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'DOCUMENT_INTELLIGENCE_ENDPOINT', 'DOCUMENT_INTELLIGENCE_ENDPOINT')),
                // 'LD_PRELOAD': ecs.Secret.fromSsmParameter(ssm.StringParameter.fromStringParameterName(this, 'LD_PRELOAD', 'LD_PRELOAD')),
            },
            logging: ecs.LogDriver.awsLogs({
                streamPrefix: `${context.AWSENV}-to2go-app-online-fargate-log`,
                logGroup,
            }),
        }).addPortMappings({
            containerPort: 8000,
            hostPort: 8000,
            protocol: ecs.Protocol.TCP,
        });
        // ECS Service
        const cluster = new ecs.Cluster(this, `${context.AWSENV}-to2go-app-online-ecs-cluster`, {
            vpc,
            clusterName: `${context.AWSENV}-to2go-app-online-ecs-cluster`,
            containerInsights: true
        });
        const securityGroup = new ec2.SecurityGroup(this, `${context.AWSENV}-to2go-app-online-securitygroup`, {
            vpc,
            securityGroupName: `${context.AWSENV}-to2go-app-online-securitygroup`,
            allowAllOutbound: true
        });
        new cdk.CfnOutput(this, 'SecurityGroupOutPut', {
            value: securityGroup.securityGroupId,
            exportName: 'online-sg-Id',
        });
        const serviceFargateService = new ecs.FargateService(this, 'ServiceServiceDefinition', {
            serviceName: `${context.AWSENV}-to2go-app-online-fargate-service`,
            cluster,
            vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS }), // プライベートサブネットを選択
            securityGroups: [securityGroup],
            taskDefinition: serviceTaskDefinition,
            assignPublicIp: true,
            enableExecuteCommand: true,
            desiredCount: context.ONLINETASK
        });
        const albsecurityGroup = new ec2.SecurityGroup(this, `${context.AWSENV}-to2go-app-online-alb-securitygroup`, {
            vpc,
            securityGroupName: `${context.AWSENV}-to2go-app-online-alb-securitygroup`,
            allowAllOutbound: true
        });
        securityGroup.addIngressRule(ec2.Peer.securityGroupId(albsecurityGroup.securityGroupId), ec2.Port.tcp(8000));
        albsecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(443));
        //Log用S3取得
        const accessLogsBucket = s3.Bucket.fromBucketName(this, "MyBucket", `${context.AWSENV}-to2go-app-s3-access-logs-bucket`);
        // ALB
        const alb = new albv2.ApplicationLoadBalancer(this, 'ALB', {
            vpc,
            securityGroup: albsecurityGroup,
            internetFacing: true,
            loadBalancerName: `${context.AWSENV}-to2go-app-online-elb`
        });
        this.loadBalancer = alb;
        alb.logAccessLogs(accessLogsBucket, `alb-access-log/${context.AWSENV}-to2go-app-online-elb`);
        const elbcertificate = Certificate.Certificate.fromCertificateArn(this, "Certificate", context.ELBCERT);
        const listenerHTTP = alb.addListener('ListenerHTTP', {
            port: 443,
            certificates: [elbcertificate],
            sslPolicy: albv2.SslPolicy.RECOMMENDED_TLS,
            open: false
        });
        // TargetGroup
        const targetGroup = new albv2.ApplicationTargetGroup(this, "TargetGroup", {
            vpc,
            port: 8000,
            protocol: albv2.ApplicationProtocol.HTTP,
            targetType: albv2.TargetType.IP,
            healthCheck: {
                path: '/',
                healthyHttpCodes: '200',
            },
        });
        listenerHTTP.addTargetGroups('DefaultHTTPSResponse', {
            targetGroups: [targetGroup]
        });
        serviceFargateService.attachToApplicationTargetGroup(targetGroup);
    }
}
exports.EcsFargateOnlineStack = EcsFargateOnlineStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNzLWZhcmdhdGUtb25saW5lLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWNzLWZhcmdhdGUtb25saW5lLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdDQUF1QztBQUN2QywyQ0FBMEM7QUFDMUMsMkNBQTBDO0FBQzFDLDJDQUEwQztBQUMxQyw2Q0FBNEM7QUFDNUMsZ0VBQStEO0FBRy9ELGlEQUFtRDtBQUVuRCxrRUFBa0U7QUFDbEUsMkNBQTJDO0FBQzNDLHlDQUF5QztBQUN6QywyQ0FBMkM7QUFFM0MsTUFBYSxxQkFBc0IsU0FBUSxHQUFHLENBQUMsS0FBSztJQUVsRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWlCO1FBQ3pELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQztRQUNqQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqRCxJQUFJLE1BQU0sSUFBSSxTQUFTO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMscUVBQXFFLFVBQVUsTUFBTSxDQUFDLENBQUM7UUFDM0csTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUMsSUFBSSxPQUFPLElBQUksU0FBUztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUVsRSxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQzdDLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLGdCQUFnQjtTQUMzQyxDQUFDLENBQUM7UUFFTCxXQUFXO1FBQ1gsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElB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RSxLQUFLO2FBQ3hCO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsWUFBWSxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsRUFBRTtZQUNuRCxZQUFZLEVBQUUsQ0FBQyxXQUFXLENBQUM7U0FDNUIsQ0FBQyxDQUFDO1FBQ0gscUJBQXFCLENBQUMsOEJBQThCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQUNGO0FBbk9ELHNEQW1PQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYi9jb3JlJ1xuaW1wb3J0ICogYXMgZWNzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lY3MnXG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMidcbmltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJ1xuaW1wb3J0ICogYXMgbG9ncyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbG9ncydcbmltcG9ydCAqIGFzIGFsYnYyIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lbGFzdGljbG9hZGJhbGFuY2luZ3YyJ1xuaW1wb3J0IHtDb25zdHJ1Y3R9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHtTdGFja1Byb3BzfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7Q29udGFpbmVySW1hZ2V9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWNzXCI7XG5pbXBvcnQge0FwcGxpY2F0aW9uTG9hZEJhbGFuY2VyfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWVsYXN0aWNsb2FkYmFsYW5jaW5ndjJcIjtcbmltcG9ydCAqIGFzIENlcnRpZmljYXRlIGZyb20gJ2F3cy1jZGstbGliL2F3cy1jZXJ0aWZpY2F0ZW1hbmFnZXInO1xuaW1wb3J0ICogYXMgZWNyIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lY3InO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCAqIGFzIHNzbSBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtc3NtJztcblxuZXhwb3J0IGNsYXNzIEVjc0ZhcmdhdGVPbmxpbmVTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gIHB1YmxpYyByZWFkb25seSBsb2FkQmFsYW5jZXI6IEFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyO1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgYXJnQ29udGV4dCA9ICdlbnZpcm9ubWVudCc7XG4gICAgY29uc3QgZW52S2V5ID0gdGhpcy5ub2RlLnRyeUdldENvbnRleHQoYXJnQ29udGV4dCk7XG4gICAgICBpZiAoZW52S2V5ID09IHVuZGVmaW5lZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQbGVhc2Ugc3BlY2lmeSBlbnZpcm9ubWVudCB3aXRoIGNvbnRleHQgb3B0aW9uLiBleCkgY2RrIGRlcGxveSAtYyAke2FyZ0NvbnRleHR9PXN0Z2ApO1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLm5vZGUudHJ5R2V0Q29udGV4dChlbnZLZXkpO1xuICAgICAgaWYgKGNvbnRleHQgPT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZW52aXJvbm1lbnQuJyk7XG5cbiAgICAgIGNvbnN0IHZwYyA9IGVjMi5WcGMuZnJvbUxvb2t1cCh0aGlzLCAnVlBDYXBwJywge1xuICAgICAgICB2cGNOYW1lOiBgJHtjb250ZXh0LkFXU0VOVn0tdG8yZ28tYXBwLXZwY2AsXG4gICAgICB9KTtcblxuICAgIC8vIElBTSBSb2xlXG4gICAgY29uc3QgZXhlY3V0aW9uUm9sZSA9IG5ldyBpYW0uUm9sZSh0aGlzLCAnRWNzVGFza0V4ZWN1dGlvblJvbGUnLCB7XG4gICAgICByb2xlTmFtZTogYCR7Y29udGV4dC5BV1NFTlZ9LXRvMmdvLW9ubGluZS1FY3NUYXNrRXhlY3V0aW9uUm9sZWAsXG4gICAgICBhc3N1bWVkQnk6IG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnZWNzLXRhc2tzLmFtYXpvbmF3cy5jb20nKSxcbiAgICAgIG1hbmFnZWRQb2xpY2llczogW1xuICAgICAgaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdzZXJ2aWNlLXJvbGUvQW1hem9uRUNTVGFza0V4ZWN1dGlvblJvbGVQb2xpY3knKSxcbiAgICAgIF0sXG4gICAgfSlcblxuICAgIGNvbnN0IHNzbVBvbGljeSA9IG5ldyBpYW0uUG9saWN5KHRoaXMsICdzc20tcG9saWN5Jywge1xuICAgICAgICBzdGF0ZW1lbnRzOlsgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoIHtcbiAgICAgICAgICBlZmZlY3Q6IGlhbS5FZmZlY3QuQUxMT1csXG4gICAgICAgICAgYWN0aW9uczogWydzc206R2V0UGFyYW1ldGVycyddLFxuICAgICAgICAgIHJlc291cmNlcyA6IFtcIipcIl0sXG4gICAgICAgIH0pXSxcbiAgICB9KVxuXG4gICAgZXhlY3V0aW9uUm9sZS5hdHRhY2hJbmxpbmVQb2xpY3koc3NtUG9saWN5KVxuXG4gICAgY29uc3Qgc2VydmljZVRhc2tSb2xlID0gbmV3IGlhbS5Sb2xlKHRoaXMsICdFY3NTZXJ2aWNlVGFza1JvbGUnLCB7XG4gICAgICByb2xlTmFtZTogYCR7Y29udGV4dC5BV1NFTlZ9LXRvMmdvLW9ubGluZS1lY3Mtc2VydmljZS10YXNrLXJvbGVgLFxuICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2Vjcy10YXNrcy5hbWF6b25hd3MuY29tJyksXG4gICAgfSlcblxuICAgIC8vIGNvbnN0IHN0YXRpY2J1Y2tldCA9IHMzLkJ1Y2tldC5mcm9tQnVja2V0TmFtZSh0aGlzLCBcIkJ1Y2tldFwiLCBgJHtjb250ZXh0LkFXU0VOVn0tdG8yZ28tYXBwLXMzYCk7XG5cbiAgICAvLyBjb25zdCBzM1BvbGljeSA9IG5ldyBpYW0uUG9saWN5KHRoaXMsICdzMy1wb2xpY3knLCB7XG4gICAgLy8gICAgICAgc3RhdGVtZW50czpbIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KCB7XG4gICAgLy8gICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgIC8vICAgICAgIGFjdGlvbnM6IFsnczM6TGlzdEJ1Y2tldCcsICdzMzpQdXRPYmplY3QnLCAnczM6R2V0T2JqZWN0JywgJ3MzOkRlbGV0ZU9iamVjdCddLFxuICAgIC8vICAgICAgIHJlc291cmNlcyA6IFtgJHtzdGF0aWNidWNrZXQuYnVja2V0QXJufS8qYF19LFxuICAgIC8vICAgICAgICldLFxuICAgIC8vIH0pXG5cbiAgICAvLyBjb25zdCBlY3NleGVjUG9saWN5ID0gbmV3IGlhbS5Qb2xpY3kodGhpcywgJ2Vjc2V4ZWMtcG9saWN5Jywge1xuICAgIC8vICAgc3RhdGVtZW50czpbIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KCB7XG4gICAgLy8gICBlZmZlY3Q6IGlhbS5FZmZlY3QuQUxMT1csXG4gICAgLy8gICBhY3Rpb25zOiBbJ3NzbW1lc3NhZ2VzOkNyZWF0ZUNvbnRyb2xDaGFubmVsJywnc3NtbWVzc2FnZXM6Q3JlYXRlRGF0YUNoYW5uZWwnLCdzc21tZXNzYWdlczpPcGVuQ29udHJvbENoYW5uZWwnLCdzc21tZXNzYWdlczpPcGVuRGF0YUNoYW5uZWwnXSxcbiAgICAvLyAgIHJlc291cmNlcyA6IFtcIipcIl19LFxuICAgIC8vICAgKV0sXG4gICAgLy8gfSlcblxuICAgIC8vIHNlcnZpY2VUYXNrUm9sZS5hdHRhY2hJbmxpbmVQb2xpY3koczNQb2xpY3kpXG4gICAgLy8gc2VydmljZVRhc2tSb2xlLmF0dGFjaElubGluZVBvbGljeShlY3NleGVjUG9saWN5KVxuXG4gIC8vIEVDUyBUYXNrRGVmaW5pdGlvblxuXG4gICAgY29uc3QgbG9nR3JvdXAgPSBuZXcgbG9ncy5Mb2dHcm91cCh0aGlzLCAnU2VydmljZUxvZ0dyb3VwJywge1xuICAgICAgbG9nR3JvdXBOYW1lOiBgJHtjb250ZXh0LkFXU0VOVn0tdG8yZ28tYXBwLW9ubGluZS1mYXJnYXRlLWxvZ2BcbiAgICB9KVxuXG4gICAgY29uc3QgZWNybmFtZSA9IGVjci5SZXBvc2l0b3J5LmZyb21SZXBvc2l0b3J5TmFtZSh0aGlzICwnZWNybmFtZScsIGAke2NvbnRleHQuQVdTRU5WfS10bzJnby1hcHAtZWNyLXJlcG9zaXRvcnlgKVxuICAgIGNvbnN0IGltYWdlID0gQ29udGFpbmVySW1hZ2UuZnJvbUVjclJlcG9zaXRvcnkoZWNybmFtZSwgJ2xhdGVzdCcpXG5cbiAgICBjb25zdCBzZXJ2aWNlVGFza0RlZmluaXRpb24gPSBuZXcgZWNzLkZhcmdhdGVUYXNrRGVmaW5pdGlvbih0aGlzLCAnU2VydmljZVRhc2tEZWZpbml0aW9uJywge1xuICAgICAgZXhlY3V0aW9uUm9sZTogZXhlY3V0aW9uUm9sZSxcbiAgICAgIHRhc2tSb2xlOiBzZXJ2aWNlVGFza1JvbGUsXG4gICAgICBjcHU6IGNvbnRleHQuT05MSU5FQ1BVLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IGNvbnRleHQuT05MSU5FTUVNT1JZLFxuICAgICAgLy8gcnVudGltZVBsYXRmb3JtOiB7XG4gICAgICAvLyAgIGNwdUFyY2hpdGVjdHVyZTogZWNzLkNwdUFyY2hpdGVjdHVyZS5vZignQVJNNjQnKVxuICAgICAgLy8gfVxuICAgIH0pXG5cbiAgICBzZXJ2aWNlVGFza0RlZmluaXRpb24uYWRkQ29udGFpbmVyKGAke2NvbnRleHQuQVdTRU5WfS10bzJnby1hcHAtb25saW5lYCwge1xuICAgICAgaW1hZ2U6aW1hZ2UsXG4gICAgICBjcHU6IGNvbnRleHQuT05MSU5FQ1BVLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IGNvbnRleHQuT05MSU5FTUVNT1JZLFxuICAgICAgbWVtb3J5UmVzZXJ2YXRpb25NaUI6IGNvbnRleHQuT05MSU5FTUVNT1JZLFxuICAgICAgY29tbWFuZDogW1xuICAgICAgICBcImJ1bmRsZVwiLFxuICAgICAgICBcImV4ZWNcIixcbiAgICAgICAgXCJyYWlsc1wiLFxuICAgICAgICBcInNcIixcbiAgICAgICAgXCItZVwiLFxuICAgICAgICBcInByb2R1Y3Rpb25cIixcbiAgICAgICAgXCItcFwiLFxuICAgICAgICBcIjgwMDBcIixcbiAgICAgICAgXCItYlwiLFxuICAgICAgICBcIjAuMC4wLjBcIlxuICAgICAgXSxcbiAgICAgIHNlY3JldHM6IHtcbiAgICAgICAgLy8gJ0NMSUVOVF9PUklHSU4nOiBlY3MuU2VjcmV0LmZyb21Tc21QYXJhbWV0ZXIoc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyTmFtZSh0aGlzLCAnQ0xJRU5UX09SSUdJTicsICdDTElFTlRfT1JJR0lOJykpLFxuICAgICAgICAvLyAnQ09SU19BTExPV0VEX09SSUdJTlMnOiBlY3MuU2VjcmV0LmZyb21Tc21QYXJhbWV0ZXIoc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyTmFtZSh0aGlzLCAnQ09SU19BTExPV0VEX09SSUdJTlMnLCAnQ09SU19BTExPV0VEX09SSUdJTlMnKSksXG4gICAgICAgICdEQl9EQVRBQkFTRSc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdEQl9EQVRBQkFTRScsICcvdG8yZ28vREJfREFUQUJBU0UnKSksXG4gICAgICAgICdEQl9IT1NUJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ0RCX0hPU1QnLCAnL3RvMmdvL0RCX0hPU1QnKSksXG4gICAgICAgICdEQl9QQVNTV09SRCc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdEQl9QQVNTV09SRCcsICcvdG8yZ28vREJfUEFTU1dPUkQnKSksXG4gICAgICAgICdEQl9QT1JUJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ0RCX1BPUlQnLCAnL3RvMmdvL0RCX1BPUlQnKSksXG4gICAgICAgICdEQl9VU0VSTkFNRSc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdEQl9VU0VSTkFNRScsICcvdG8yZ28vREJfVVNFUk5BTUUnKSksXG4gICAgICAgICdTRUNSRVRfS0VZX0JBU0UnOiBlY3MuU2VjcmV0LmZyb21Tc21QYXJhbWV0ZXIoc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyTmFtZSh0aGlzLCAnU0VDUkVUX0tFWV9CQVNFJywgJy90bzJnby9TRUNSRVRfS0VZX0JBU0UnKSksXG4gICAgICAgIC8vICdJTlRFQ19FTkRQT0lOVCc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdJTlRFQ19FTkRQT0lOVCcsICdJTlRFQ19FTkRQT0lOVCcpKSxcbiAgICAgICAgLy8gJ0pXVF9QUklWQVRFX0tFWSc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdKV1RfUFJJVkFURV9LRVknLCAnSldUX1BSSVZBVEVfS0VZJykpLFxuICAgICAgICAvLyAnUkFJTFNfRU5WJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ1JBSUxTX0VOVicsICdSQUlMU19FTlYnKSksXG4gICAgICAgIC8vICdSQUlMU19IT1NUJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ1JBSUxTX0hPU1QnLCAnUkFJTFNfSE9TVCcpKSxcbiAgICAgICAgLy8gJ1JBSUxTX0xPR19UT19TVERPVVQnOiBlY3MuU2VjcmV0LmZyb21Tc21QYXJhbWV0ZXIoc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyTmFtZSh0aGlzLCAnUkFJTFNfTE9HX1RPX1NURE9VVCcsICdSQUlMU19MT0dfVE9fU1RET1VUJykpLFxuICAgICAgICAvLyAnUkVESVNfREInOiBlY3MuU2VjcmV0LmZyb21Tc21QYXJhbWV0ZXIoc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyTmFtZSh0aGlzLCAnUkVESVNfREInLCAnUkVESVNfREInKSksXG4gICAgICAgIC8vICdSRURJU19IT1NUJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ1JFRElTX0hPU1QnLCAnUkVESVNfSE9TVCcpKSxcbiAgICAgICAgLy8gJ1JFRElTX1BPUlQnOiBlY3MuU2VjcmV0LmZyb21Tc21QYXJhbWV0ZXIoc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyTmFtZSh0aGlzLCAnUkVESVNfUE9SVCcsICdSRURJU19QT1JUJykpLFxuICAgICAgICAvLyAnU0VDUkVUX0tFWV9CQVNFJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ1NFQ1JFVF9LRVlfQkFTRScsICdTRUNSRVRfS0VZX0JBU0UnKSksXG4gICAgICAgIC8vICdTSU1PVU5UX0VORFBPSU5UJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ1NJTU9VTlRfRU5EUE9JTlQnLCAnU0lNT1VOVF9FTkRQT0lOVCcpKSxcbiAgICAgICAgLy8gJ1NJREVLSVFfTE9HSU5fSUQnOiBlY3MuU2VjcmV0LmZyb21Tc21QYXJhbWV0ZXIoc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyTmFtZSh0aGlzLCAnU0lERUtJUV9MT0dJTl9JRCcsICdTSURFS0lRX0xPR0lOX0lEJykpLFxuICAgICAgICAvLyAnU0lERUtJUV9MT0dJTl9QQVNTJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ1NJREVLSVFfTE9HSU5fUEFTUycsICdTSURFS0lRX0xPR0lOX1BBU1MnKSksXG4gICAgICAgIC8vICdTM19CVUNLRVRfTkFNRSc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdTM19CVUNLRVRfTkFNRScsICdTM19CVUNLRVRfTkFNRScpKSxcbiAgICAgICAgLy8gJ1NFUlZFUl9IT1NUJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ1NFUlZFUl9IT1NUJywgJ1NFUlZFUl9IT1NUJykpLFxuICAgICAgICAvLyAnQUNUSVZFX1NUT1JBR0VfUzNfQlVDS0VUJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ0FDVElWRV9TVE9SQUdFX1MzX0JVQ0tFVCcsICdBQ1RJVkVfU1RPUkFHRV9TM19CVUNLRVQnKSksXG4gICAgICAgIC8vICdEQl9URVNUX0RBVEFCQVNFJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ0RCX1RFU1RfREFUQUJBU0UnLCAnREJfVEVTVF9EQVRBQkFTRScpKSxcbiAgICAgICAgLy8gJ0lOVEVDX0FXU19BQ0NFU1NfS0VZJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ0lOVEVDX0FXU19BQ0NFU1NfS0VZJywgJ0lOVEVDX0FXU19BQ0NFU1NfS0VZJykpLFxuICAgICAgICAvLyAnSU5URUNfQVdTX1NFQ1JFVF9LRVknOiBlY3MuU2VjcmV0LmZyb21Tc21QYXJhbWV0ZXIoc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyTmFtZSh0aGlzLCAnSU5URUNfQVdTX1NFQ1JFVF9LRVknLCAnSU5URUNfQVdTX1NFQ1JFVF9LRVknKSksXG4gICAgICAgIC8vICdJTlRFQ19BV1NfUkVHSU9OJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ0lOVEVDX0FXU19SRUdJT04nLCAnSU5URUNfQVdTX1JFR0lPTicpKSxcbiAgICAgICAgLy8gJ0xPR1NfUzNfQlVDS0VUX05BTUUnOiBlY3MuU2VjcmV0LmZyb21Tc21QYXJhbWV0ZXIoc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyTmFtZSh0aGlzLCAnSUxPR1NfUzNfQlVDS0VUX05BTUUnLCAnTE9HU19TM19CVUNLRVRfTkFNRScpKSxcbiAgICAgICAgLy8gJ09QRU5BSV9BQ0NFU1NfVE9LRU4nOiBlY3MuU2VjcmV0LmZyb21Tc21QYXJhbWV0ZXIoc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyTmFtZSh0aGlzLCAnT1BFTkFJX0FDQ0VTU19UT0tFTicsICdPUEVOQUlfQUNDRVNTX1RPS0VOJykpLFxuICAgICAgICAvLyAnT1BFTkFJX1NIT1dfTE9HX0VSUk9SUyc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdPUEVOQUlfU0hPV19MT0dfRVJST1JTJywgJ09QRU5BSV9TSE9XX0xPR19FUlJPUlMnKSksXG4gICAgICAgIC8vICdDUEFTU19UT0tFTic6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdDUEFTU19UT0tFTicsICdDUEFTU19UT0tFTicpKSxcbiAgICAgICAgLy8gJ0NQQVNTX1VSSSc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdDUEFTU19VUkknLCAnQ1BBU1NfVVJJJykpLFxuICAgICAgICAvLyAnRlJPTV9BRERSRVNTJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ0ZST01fQUREUkVTUycsICdGUk9NX0FERFJFU1MnKSksXG4gICAgICAgIC8vICdDUEFBU19UT0tFTic6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdDUEFBU19UT0tFTicsICdDUEFBU19UT0tFTicpKSxcbiAgICAgICAgLy8gJ0NQQUFTX1VSSSc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdDUEFBU19VUkknLCAnQ1BBQVNfVVJJJykpLFxuICAgICAgICAvLyAnQ1BBQVNfRlJPTV9BRERSRVNTJzogZWNzLlNlY3JldC5mcm9tU3NtUGFyYW1ldGVyKHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ0NQQUFTX0ZST01fQUREUkVTUycsICdDUEFBU19GUk9NX0FERFJFU1MnKSksXG4gICAgICAgIC8vICdET0NVTUVOVF9JTlRFTExJR0VOQ0VfQVBJX0tFWSc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdET0NVTUVOVF9JTlRFTExJR0VOQ0VfQVBJX0tFWScsICdET0NVTUVOVF9JTlRFTExJR0VOQ0VfQVBJX0tFWScpKSxcbiAgICAgICAgLy8gJ0RPQ1VNRU5UX0lOVEVMTElHRU5DRV9FTkRQT0lOVCc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdET0NVTUVOVF9JTlRFTExJR0VOQ0VfRU5EUE9JTlQnLCAnRE9DVU1FTlRfSU5URUxMSUdFTkNFX0VORFBPSU5UJykpLFxuICAgICAgICAvLyAnTERfUFJFTE9BRCc6IGVjcy5TZWNyZXQuZnJvbVNzbVBhcmFtZXRlcihzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJOYW1lKHRoaXMsICdMRF9QUkVMT0FEJywgJ0xEX1BSRUxPQUQnKSksXG4gICAgICB9LFxuICAgICAgbG9nZ2luZzogZWNzLkxvZ0RyaXZlci5hd3NMb2dzKHtcbiAgICAgIHN0cmVhbVByZWZpeDogYCR7Y29udGV4dC5BV1NFTlZ9LXRvMmdvLWFwcC1vbmxpbmUtZmFyZ2F0ZS1sb2dgLFxuICAgICAgbG9nR3JvdXAsXG4gICAgICB9KSxcbiAgICB9KS5hZGRQb3J0TWFwcGluZ3Moe1xuICAgICAgY29udGFpbmVyUG9ydDogODAwMCxcbiAgICAgIGhvc3RQb3J0OiA4MDAwLFxuICAgICAgcHJvdG9jb2w6IGVjcy5Qcm90b2NvbC5UQ1AsXG4gICAgfSlcblxuICAgIC8vIEVDUyBTZXJ2aWNlXG4gICAgY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3Rlcih0aGlzLCBgJHtjb250ZXh0LkFXU0VOVn0tdG8yZ28tYXBwLW9ubGluZS1lY3MtY2x1c3RlcmAsIHtcbiAgICAgIHZwYyxcbiAgICAgIGNsdXN0ZXJOYW1lOiBgJHtjb250ZXh0LkFXU0VOVn0tdG8yZ28tYXBwLW9ubGluZS1lY3MtY2x1c3RlcmAsXG4gICAgICBjb250YWluZXJJbnNpZ2h0czogdHJ1ZVxuICAgIH0pXG5cbiAgICBjb25zdCBzZWN1cml0eUdyb3VwID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHRoaXMsIGAke2NvbnRleHQuQVdTRU5WfS10bzJnby1hcHAtb25saW5lLXNlY3VyaXR5Z3JvdXBgLCB7XG4gICAgICB2cGMsXG4gICAgICBzZWN1cml0eUdyb3VwTmFtZTogYCR7Y29udGV4dC5BV1NFTlZ9LXRvMmdvLWFwcC1vbmxpbmUtc2VjdXJpdHlncm91cGAsXG4gICAgICBhbGxvd0FsbE91dGJvdW5kOiB0cnVlXG4gICAgfSk7XG5cbiAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnU2VjdXJpdHlHcm91cE91dFB1dCcsIHtcbiAgICAgIHZhbHVlOiBzZWN1cml0eUdyb3VwLnNlY3VyaXR5R3JvdXBJZCxcbiAgICAgIGV4cG9ydE5hbWU6ICdvbmxpbmUtc2ctSWQnLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc2VydmljZUZhcmdhdGVTZXJ2aWNlID0gbmV3IGVjcy5GYXJnYXRlU2VydmljZSh0aGlzLCAnU2VydmljZVNlcnZpY2VEZWZpbml0aW9uJywge1xuICAgICAgc2VydmljZU5hbWU6IGAke2NvbnRleHQuQVdTRU5WfS10bzJnby1hcHAtb25saW5lLWZhcmdhdGUtc2VydmljZWAsXG4gICAgICBjbHVzdGVyLFxuICAgICAgdnBjU3VibmV0czogdnBjLnNlbGVjdFN1Ym5ldHMoeyBzdWJuZXRUeXBlOiBlYzIuU3VibmV0VHlwZS5QUklWQVRFX1dJVEhfRUdSRVNTIH0pLCAvLyDjg5fjg6njgqTjg5njg7zjg4jjgrXjg5bjg43jg4Pjg4jjgpLpgbjmip5cbiAgICAgIHNlY3VyaXR5R3JvdXBzOiBbc2VjdXJpdHlHcm91cF0sXG4gICAgICB0YXNrRGVmaW5pdGlvbjogc2VydmljZVRhc2tEZWZpbml0aW9uLFxuICAgICAgYXNzaWduUHVibGljSXA6IHRydWUsXG4gICAgICBlbmFibGVFeGVjdXRlQ29tbWFuZCA6IHRydWUsXG4gICAgICBkZXNpcmVkQ291bnQ6Y29udGV4dC5PTkxJTkVUQVNLXG4gICAgfSlcblxuICAgIGNvbnN0IGFsYnNlY3VyaXR5R3JvdXAgPSBuZXcgZWMyLlNlY3VyaXR5R3JvdXAodGhpcywgYCR7Y29udGV4dC5BV1NFTlZ9LXRvMmdvLWFwcC1vbmxpbmUtYWxiLXNlY3VyaXR5Z3JvdXBgLCB7XG4gICAgICB2cGMsXG4gICAgICBzZWN1cml0eUdyb3VwTmFtZTogYCR7Y29udGV4dC5BV1NFTlZ9LXRvMmdvLWFwcC1vbmxpbmUtYWxiLXNlY3VyaXR5Z3JvdXBgLFxuICAgICAgYWxsb3dBbGxPdXRib3VuZDogdHJ1ZVxuICAgIH0pO1xuXG4gICAgc2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZShlYzIuUGVlci5zZWN1cml0eUdyb3VwSWQoYWxic2VjdXJpdHlHcm91cC5zZWN1cml0eUdyb3VwSWQpLGVjMi5Qb3J0LnRjcCg4MDAwKSk7XG4gICAgYWxic2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZShlYzIuUGVlci5hbnlJcHY0KCksIGVjMi5Qb3J0LnRjcCg0NDMpKTtcblxuICAgIC8vTG9n55SoUzPlj5blvpdcbiAgICBjb25zdCBhY2Nlc3NMb2dzQnVja2V0ID0gczMuQnVja2V0LmZyb21CdWNrZXROYW1lKHRoaXMsIFwiTXlCdWNrZXRcIiwgYCR7Y29udGV4dC5BV1NFTlZ9LXRvMmdvLWFwcC1zMy1hY2Nlc3MtbG9ncy1idWNrZXRgKTtcblxuICAgIC8vIEFMQlxuICAgIGNvbnN0IGFsYiA9IG5ldyBhbGJ2Mi5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlcih0aGlzLCAnQUxCJywge1xuICAgICAgdnBjLFxuICAgICAgc2VjdXJpdHlHcm91cDogYWxic2VjdXJpdHlHcm91cCxcbiAgICAgIGludGVybmV0RmFjaW5nOiB0cnVlLFxuICAgICAgbG9hZEJhbGFuY2VyTmFtZTogYCR7Y29udGV4dC5BV1NFTlZ9LXRvMmdvLWFwcC1vbmxpbmUtZWxiYFxuICAgIH0pO1xuICAgIHRoaXMubG9hZEJhbGFuY2VyID0gYWxiXG4gICAgYWxiLmxvZ0FjY2Vzc0xvZ3MoYWNjZXNzTG9nc0J1Y2tldCxgYWxiLWFjY2Vzcy1sb2cvJHtjb250ZXh0LkFXU0VOVn0tdG8yZ28tYXBwLW9ubGluZS1lbGJgKVxuXG4gICAgY29uc3QgZWxiY2VydGlmaWNhdGUgPSBDZXJ0aWZpY2F0ZS5DZXJ0aWZpY2F0ZS5mcm9tQ2VydGlmaWNhdGVBcm4odGhpcywgXCJDZXJ0aWZpY2F0ZVwiLFxuICAgICAgY29udGV4dC5FTEJDRVJUXG4gICAgKTtcblxuICAgIGNvbnN0IGxpc3RlbmVySFRUUCA9IGFsYi5hZGRMaXN0ZW5lcignTGlzdGVuZXJIVFRQJywge1xuICAgICAgcG9ydDogNDQzLFxuICAgICAgY2VydGlmaWNhdGVzOiBbZWxiY2VydGlmaWNhdGVdLFxuICAgICAgc3NsUG9saWN5OiBhbGJ2Mi5Tc2xQb2xpY3kuUkVDT01NRU5ERURfVExTLFxuICAgICAgb3BlbjpmYWxzZVxuICAgIH0pO1xuXG4gICAgLy8gVGFyZ2V0R3JvdXBcbiAgICBjb25zdCB0YXJnZXRHcm91cCA9IG5ldyBhbGJ2Mi5BcHBsaWNhdGlvblRhcmdldEdyb3VwKHRoaXMsIFwiVGFyZ2V0R3JvdXBcIiwge1xuICAgICAgdnBjLFxuICAgICAgcG9ydDogODAwMCxcbiAgICAgIHByb3RvY29sOiBhbGJ2Mi5BcHBsaWNhdGlvblByb3RvY29sLkhUVFAsXG4gICAgICB0YXJnZXRUeXBlOiBhbGJ2Mi5UYXJnZXRUeXBlLklQLFxuICAgICAgaGVhbHRoQ2hlY2s6IHtcbiAgICAgICAgcGF0aDogJy8nLFxuICAgICAgICBoZWFsdGh5SHR0cENvZGVzOiAnMjAwJyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBsaXN0ZW5lckhUVFAuYWRkVGFyZ2V0R3JvdXBzKCdEZWZhdWx0SFRUUFNSZXNwb25zZScsIHtcbiAgICAgIHRhcmdldEdyb3VwczogW3RhcmdldEdyb3VwXVxuICAgIH0pO1xuICAgIHNlcnZpY2VGYXJnYXRlU2VydmljZS5hdHRhY2hUb0FwcGxpY2F0aW9uVGFyZ2V0R3JvdXAodGFyZ2V0R3JvdXApO1xuICB9XG59XG4iXX0=