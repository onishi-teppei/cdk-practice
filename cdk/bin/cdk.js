#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
// import { CdkStack } from '../lib/cdk-stack';
const vpc_stack_1 = require("../lib/vpc-stack");
const ecr_stack_1 = require("../lib/ecr-stack");
const rds_stack_1 = require("../lib/rds-stack");
const ecs_fargate_online_stack_1 = require("../lib/ecs-fargate-online-stack");
const app = new cdk.App();
const argContext = 'environment';
const envKey = app.node.tryGetContext(argContext);
if (envKey == undefined)
    throw new Error(`Please specify environment with context option. ex) cdk deploy -c ${argContext}=stg`);
const envVals = app.node.tryGetContext(envKey);
if (envVals == undefined)
    throw new Error('Invalid environment.');
// 環境変数を設定
const env = { account: envVals['env']['account'], region: envVals['env']['region'] };
// VPC Stackを作成
const vpcStack = new vpc_stack_1.VpcStack(app, 'VpcStack', {
    env,
});
const ecrStack = new ecr_stack_1.EcrStack(app, 'EcrStack', {
    env,
});
new rds_stack_1.RdsStack(app, 'RdsStack', {
    env,
});
const ecsFargateOnlineStack = new ecs_fargate_online_stack_1.EcsFargateOnlineStack(app, 'EcsFargateOnlineStack', {
    env,
});
// new CdkStack(app, 'CdkStack', {
//   /* If you don't specify 'env', this stack will be environment-agnostic.
//    * Account/Region-dependent features and context lookups will not work,
//    * but a single synthesized template can be deployed anywhere. */
//   /* Uncomment the next line to specialize this stack for the AWS Account
//    * and Region that are implied by the current CLI configuration. */
//   // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
//   /* Uncomment the next line if you know exactly what Account and Region you
//    * want to deploy the stack to. */
//   // env: { account: '123456789012', region: 'us-east-1' },
//   /* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */
// });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2RrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG1DQUFtQztBQUNuQywrQ0FBK0M7QUFDL0MsZ0RBQTBDO0FBQzFDLGdEQUEwQztBQUMxQyxnREFBMEM7QUFDMUMsOEVBQXNFO0FBRXRFLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQztBQUNqQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNoRCxJQUFJLE1BQU0sSUFBSSxTQUFTO0lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMscUVBQXFFLFVBQVUsTUFBTSxDQUFDLENBQUM7QUFDM0csTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0MsSUFBSSxPQUFPLElBQUksU0FBUztJQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUVwRSxVQUFVO0FBQ1YsTUFBTSxHQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztBQUVyRixlQUFlO0FBQ2YsTUFBTSxRQUFRLEdBQUcsSUFBSSxvQkFBUSxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUU7SUFDN0MsR0FBRztDQUNKLENBQUMsQ0FBQTtBQUVGLE1BQU0sUUFBUSxHQUFHLElBQUksb0JBQVEsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFO0lBQzdDLEdBQUc7Q0FDSixDQUFDLENBQUE7QUFFRixJQUFJLG9CQUFRLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRTtJQUM1QixHQUFHO0NBQ0osQ0FBQyxDQUFBO0FBRUYsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGdEQUFxQixDQUFDLEdBQUcsRUFBRSx1QkFBdUIsRUFBRTtJQUNwRixHQUFHO0NBQ0osQ0FBQyxDQUFBO0FBRUYsa0NBQWtDO0FBQ2xDLDRFQUE0RTtBQUM1RSw0RUFBNEU7QUFDNUUsc0VBQXNFO0FBRXRFLDRFQUE0RTtBQUM1RSx3RUFBd0U7QUFDeEUsa0dBQWtHO0FBRWxHLCtFQUErRTtBQUMvRSx1Q0FBdUM7QUFDdkMsOERBQThEO0FBRTlELG1HQUFtRztBQUNuRyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbi8vIGltcG9ydCB7IENka1N0YWNrIH0gZnJvbSAnLi4vbGliL2Nkay1zdGFjayc7XG5pbXBvcnQge1ZwY1N0YWNrfSBmcm9tICcuLi9saWIvdnBjLXN0YWNrJztcbmltcG9ydCB7RWNyU3RhY2t9IGZyb20gXCIuLi9saWIvZWNyLXN0YWNrXCI7XG5pbXBvcnQge1Jkc1N0YWNrfSBmcm9tICcuLi9saWIvcmRzLXN0YWNrJztcbmltcG9ydCB7RWNzRmFyZ2F0ZU9ubGluZVN0YWNrfSBmcm9tIFwiLi4vbGliL2Vjcy1mYXJnYXRlLW9ubGluZS1zdGFja1wiO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBhcmdDb250ZXh0ID0gJ2Vudmlyb25tZW50JztcbmNvbnN0IGVudktleSA9IGFwcC5ub2RlLnRyeUdldENvbnRleHQoYXJnQ29udGV4dCk7XG4gIGlmIChlbnZLZXkgPT0gdW5kZWZpbmVkKVxuICAgIHRocm93IG5ldyBFcnJvcihgUGxlYXNlIHNwZWNpZnkgZW52aXJvbm1lbnQgd2l0aCBjb250ZXh0IG9wdGlvbi4gZXgpIGNkayBkZXBsb3kgLWMgJHthcmdDb250ZXh0fT1zdGdgKTtcbmNvbnN0IGVudlZhbHMgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KGVudktleSk7XG4gIGlmIChlbnZWYWxzID09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVudmlyb25tZW50LicpO1xuXG4vLyDnkrDlooPlpInmlbDjgpLoqK3lrppcbmNvbnN0IGVudiA9IHsgYWNjb3VudDogZW52VmFsc1snZW52J11bJ2FjY291bnQnXSwgcmVnaW9uOiBlbnZWYWxzWydlbnYnXVsncmVnaW9uJ10gfTtcblxuLy8gVlBDIFN0YWNr44KS5L2c5oiQXG5jb25zdCB2cGNTdGFjayA9IG5ldyBWcGNTdGFjayhhcHAsICdWcGNTdGFjaycsIHtcbiAgZW52LFxufSlcblxuY29uc3QgZWNyU3RhY2sgPSBuZXcgRWNyU3RhY2soYXBwLCAnRWNyU3RhY2snLCB7XG4gIGVudixcbn0pXG5cbm5ldyBSZHNTdGFjayhhcHAsICdSZHNTdGFjaycsIHtcbiAgZW52LFxufSlcblxuY29uc3QgZWNzRmFyZ2F0ZU9ubGluZVN0YWNrID0gbmV3IEVjc0ZhcmdhdGVPbmxpbmVTdGFjayhhcHAsICdFY3NGYXJnYXRlT25saW5lU3RhY2snLCB7XG4gIGVudixcbn0pXG5cbi8vIG5ldyBDZGtTdGFjayhhcHAsICdDZGtTdGFjaycsIHtcbi8vICAgLyogSWYgeW91IGRvbid0IHNwZWNpZnkgJ2VudicsIHRoaXMgc3RhY2sgd2lsbCBiZSBlbnZpcm9ubWVudC1hZ25vc3RpYy5cbi8vICAgICogQWNjb3VudC9SZWdpb24tZGVwZW5kZW50IGZlYXR1cmVzIGFuZCBjb250ZXh0IGxvb2t1cHMgd2lsbCBub3Qgd29yayxcbi8vICAgICogYnV0IGEgc2luZ2xlIHN5bnRoZXNpemVkIHRlbXBsYXRlIGNhbiBiZSBkZXBsb3llZCBhbnl3aGVyZS4gKi9cblxuLy8gICAvKiBVbmNvbW1lbnQgdGhlIG5leHQgbGluZSB0byBzcGVjaWFsaXplIHRoaXMgc3RhY2sgZm9yIHRoZSBBV1MgQWNjb3VudFxuLy8gICAgKiBhbmQgUmVnaW9uIHRoYXQgYXJlIGltcGxpZWQgYnkgdGhlIGN1cnJlbnQgQ0xJIGNvbmZpZ3VyYXRpb24uICovXG4vLyAgIC8vIGVudjogeyBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULCByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB9LFxuXG4vLyAgIC8qIFVuY29tbWVudCB0aGUgbmV4dCBsaW5lIGlmIHlvdSBrbm93IGV4YWN0bHkgd2hhdCBBY2NvdW50IGFuZCBSZWdpb24geW91XG4vLyAgICAqIHdhbnQgdG8gZGVwbG95IHRoZSBzdGFjayB0by4gKi9cbi8vICAgLy8gZW52OiB7IGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLCByZWdpb246ICd1cy1lYXN0LTEnIH0sXG5cbi8vICAgLyogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY2RrL2xhdGVzdC9ndWlkZS9lbnZpcm9ubWVudHMuaHRtbCAqL1xuLy8gfSk7Il19